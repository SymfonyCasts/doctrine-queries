WEBVTT

00:00:01.096 --> 00:00:02.786 align:middle
Abre CategoryRepository.

00:00:03.366 --> 00:00:06.226 align:middle
->leftJoin() Aquí tenemos unos
cuantos sitios en los que vamos a

00:00:06.226 --> 00:00:09.196 align:middle
fortuneCookies y seleccionamos
galletas de la suerte.

00:00:09.196 --> 00:00:13.176 align:middle
En el futuro, puede que necesitemos
hacer eso en aún más métodos...

00:00:13.346 --> 00:00:17.666 align:middle
así que sería súper estupendo si
pudiéramos reutilizar esa lógica en

00:00:17.666 --> 00:00:19.516 align:middle
lugar de repetirla una y otra vez.

00:00:20.026 --> 00:00:20.976 align:middle
¡Hagámoslo!

00:00:21.526 --> 00:00:27.046 align:middle
En cualquier lugar de aquí dentro, añade un nuevo
private function llamado addFortuneCookieJoinAndSelect().

00:00:28.016 --> 00:00:33.466 align:middle
Este aceptará un objeto QueryBuilder
(asegúrate de que obtienes el de Doctrine\ORM -

00:00:33.766 --> 00:00:38.186 align:middle
el "Object Relational
Mapper"), y llamémoslo $qb.

00:00:38.276 --> 00:00:40.486 align:middle
Esto también devolverá un QueryBuilder.

00:00:40.486 --> 00:00:42.906 align:middle
El siguiente paso es bastante sencillo.

00:00:43.346 --> 00:00:45.216 align:middle
Ve a robar la lógica de JOIN de arriba...

00:00:45.826 --> 00:00:49.586 align:middle
y, aquí abajo, digamos return $qb...

00:00:49.586 --> 00:00:50.536 align:middle
y pega eso...

00:00:51.116 --> 00:00:55.076 align:middle
asegurándote de limpiar cualquier desorden
de espaciado que se haya podido producir.

00:00:55.826 --> 00:00:56.776 align:middle
Y... ¡listo!

00:00:57.276 --> 00:01:00.006 align:middle
Ahora podemos llamar a este
método, pasarle el QueryBuilder,

00:01:00.246 --> 00:01:04.036 align:middle
y añadirá el JOIN y el SELECT por nosotros.

00:01:04.036 --> 00:01:05.786 align:middle
El resultado es bastante bonito.

00:01:06.146 --> 00:01:10.756 align:middle
Aquí arriba, podemos decir $qb =
$this->createQueryBuilder('category')...

00:01:11.606 --> 00:01:12.186 align:middle
y abajo,

00:01:12.436 --> 00:01:17.546 align:middle
return $this->addFortuneCookieJoinAndSelect()
pasando $qb.

00:01:18.686 --> 00:01:22.986 align:middle
Creamos el $qb, se lo pasamos
al método, lo modifica...

00:01:23.096 --> 00:01:28.526 align:middle
y luego también devuelve el QueryBuilder,
así que podemos encadenarlo de forma normal.

00:01:28.526 --> 00:01:31.826 align:middle
Gira y prueba la función "Buscar".

00:01:32.716 --> 00:01:33.746 align:middle
Y... oh...

00:01:34.036 --> 00:01:35.286 align:middle
¡claro que se rompe!

00:01:35.596 --> 00:01:37.866 align:middle
Tenemos que eliminar este exceso de código.

00:01:39.546 --> 00:01:40.826 align:middle
Si lo intentamos ahora...

00:01:41.396 --> 00:01:42.956 align:middle
¡gran éxito!

00:01:42.956 --> 00:01:45.586 align:middle
Para celebrarlo, repite lo mismo aquí abajo.

00:01:45.966 --> 00:01:48.246 align:middle
Sustituye return por $qb =...

00:01:49.276 --> 00:01:54.036 align:middle
debajo, digamos return
$this->addFortuneCookieJoinAndSelect() pasando

00:01:54.036 --> 00:01:59.216 align:middle
a $qb, y luego eliminamos
->addSelect() y ->leftJoin().

00:01:59.216 --> 00:02:03.916 align:middle
Esto es para la página de Categorías, así
que si hacemos clic en cualquier categoría...

00:02:04.346 --> 00:02:06.896 align:middle
¡perfecto! Sigue funcionando.

00:02:07.476 --> 00:02:09.586 align:middle
Pero... ¡podemos hacerlo aún mejor!

00:02:09.966 --> 00:02:14.916 align:middle
En lugar de requerir el objeto QueryBuilder
como argumento, hazlo opcional.

00:02:17.216 --> 00:02:23.356 align:middle
Fíjate: aquí abajo, retoca esto para que
si tenemos un $qb, lo utilicemos, si no,

00:02:23.456 --> 00:02:25.886 align:middle
$this->createQueryBuilder('category').

00:02:25.976 --> 00:02:31.686 align:middle
Así que si se ha pasado un QueryBuilder,
úsalo y llama a ->addSelect() , si no,

00:02:32.116 --> 00:02:36.776 align:middle
crea un nuevo QueryBuilder y
llama a ->addSelect() con él.

00:02:37.196 --> 00:02:42.576 align:middle
La ventaja es que aquí arriba no necesitamos
inicializar en absoluto nuestro QueryBuilder...

00:02:42.936 --> 00:02:45.436 align:middle
y lo mismo ocurre con el método anterior.

00:02:45.946 --> 00:02:51.566 align:middle
Pero puedes ver lo importante que es que utilicemos
un alias coherente en todas partes. Estamos

00:02:52.396 --> 00:02:54.716 align:middle
haciendo referencia a
category.name, category.iconKey,

00:02:54.716 --> 00:02:57.986 align:middle
y category.id... así que

00:02:58.106 --> 00:03:04.106 align:middle
tenemos que asegurarnos de que siempre creamos un
QueryBuilder utilizando ese alias exacto. De lo contrario...

00:03:04.486 --> 00:03:06.596 align:middle
las cosas explotarían.

00:03:07.476 --> 00:03:13.056 align:middle
Añadamos un método reutilizable más: private
function addOrderByCategoryName()... porque

00:03:13.446 --> 00:03:17.346 align:middle
probablemente querremos ordenar siempre
nuestros datos de la misma manera. Dale a

00:03:17.996 --> 00:03:21.876 align:middle
esto el argumento habitual
QueryBuilder $qb = null, devuelve

00:03:22.156 --> 00:03:26.056 align:middle
un QueryBuilder, y el
interior es bastante sencillo.

00:03:26.516 --> 00:03:27.766 align:middle
Robaré el código anterior...

00:03:28.376 --> 00:03:30.606 align:middle
déjame darle a "enter" para
que se vea un poco mejor... y

00:03:30.976 --> 00:03:32.486 align:middle
empezaré de la misma manera. Crearemos

00:03:34.086 --> 00:03:39.176 align:middle
un QueryBuilder si es necesario, y luego diremos
->addOrderBy('category.name') , seguido

00:03:40.546 --> 00:03:45.846 align:middle
de Criteria::DESC, que hemos utilizado
antes en nuestro método search(). Y

00:03:45.846 --> 00:03:51.836 align:middle
sí, estamos ordenando en orden alfabético
inverso porque, bueno, sinceramente

00:03:51.836 --> 00:03:55.606 align:middle
no tengo ni idea de en qué estaba
pensando cuando codifiqué esa parte. Para

00:03:56.336 --> 00:03:58.686 align:middle
utilizar esto, tenemos que
separar un poco las cosas. Empieza

00:03:59.306 --> 00:04:05.146 align:middle
con $qb = $this->addOrderByCategoryName()
y no le pases nada. Luego pasa

00:04:05.756 --> 00:04:08.656 align:middle
ese $qb a la segunda parte. En

00:04:08.716 --> 00:04:14.496 align:middle
cuanto tengas varios métodos abreviados, no
podrás encadenarlos todos... lo cual es un pequeño

00:04:14.496 --> 00:04:15.996 align:middle
fastidio. Pero

00:04:16.366 --> 00:04:20.146 align:middle
esto nos permite eliminar el
->addOrderBy() de aquí abajo. Si

00:04:20.176 --> 00:04:22.286 align:middle
lo intentamos ahora... ¡la

00:04:22.736 --> 00:04:24.806 align:middle
página sigue funcionando! Y si

00:04:25.456 --> 00:04:27.766 align:middle
intentamos buscar algo en
la página principal...

00:04:27.946 --> 00:04:29.286 align:middle
¡también funciona! A continuación:

00:04:30.356 --> 00:04:33.466 align:middle
conozcamos el sistema Criteria: una

00:04:33.736 --> 00:04:39.186 align:middle
forma realmente genial de filtrar eficazmente las
relaciones de colección dentro de la base de datos,

00:04:39.366 --> 00:04:41.446 align:middle
manteniendo tu código sencillísimo.
