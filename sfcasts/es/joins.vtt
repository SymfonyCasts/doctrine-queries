WEBVTT

00:00:01.096 --> 00:00:04.286 align:middle
Tenemos este genial método ->andWhere()
que busca en las propiedades name

00:00:04.426 --> 00:00:07.266 align:middle
o iconKey de la entidad Category.

00:00:07.796 --> 00:00:12.776 align:middle
Pero, ¿podríamos buscar también en los datos de
las galletas de la suerte dentro de cada categoría?

00:00:13.366 --> 00:00:16.496 align:middle
¡Por supuesto! Veamos cómo
se establece esa relación.

00:00:17.526 --> 00:00:23.016 align:middle
En Category, tenemos una relación OneToMany
sobre una propiedad llamada $fortuneCookies

00:00:23.256 --> 00:00:25.486 align:middle
sobre la entidad FortuneCookie.

00:00:26.246 --> 00:00:32.376 align:middle
Si pensamos en el problema desde la perspectiva de la
base de datos, para actualizar nuestra cláusula WHERE

00:00:32.406 --> 00:00:36.406 align:middle
para incluir WHERE
fortune_cookie.fortune = :searchTerm,

00:00:36.746 --> 00:00:40.226 align:middle
primero necesitamos JOIN
a la tabla fortune_cookie.

00:00:40.596 --> 00:00:42.966 align:middle
Y eso es lo que vamos a hacer en Doctrine...

00:00:43.156 --> 00:00:45.036 align:middle
excepto que con un giro.

00:00:45.606 --> 00:00:49.486 align:middle
En lugar de pensar en unir tablas, vamos a

00:00:49.486 --> 00:00:52.096 align:middle
pensar en unir clases de entidades.

00:00:52.626 --> 00:00:55.746 align:middle
Esto puede parecer raro al
principio, pero es genial.

00:00:56.446 --> 00:01:01.376 align:middle
En este caso, queremos que JOIN pase
de esta propiedad fortuneCookies

00:01:01.636 --> 00:01:03.616 align:middle
a la entidad FortuneCookie.

00:01:04.296 --> 00:01:05.046 align:middle
Hagámoslo

00:01:05.566 --> 00:01:07.656 align:middle
De vuelta en CategoryRepository...

00:01:08.186 --> 00:01:10.446 align:middle
podemos añadir la unión en
cualquier parte de la consulta.

00:01:10.926 --> 00:01:15.426 align:middle
A diferencia de SQL, al Constructor de Consultas
no le importa el orden en que hagas las cosas.

00:01:15.916 --> 00:01:21.646 align:middle
Añade ->leftJoin() porque estamos uniendo desde
una categoría a muchas galletas de la suerte.

00:01:22.346 --> 00:01:28.076 align:middle
Pásale category.fortuneCookies
y luego fortuneCookie,

00:01:28.406 --> 00:01:31.396 align:middle
que será el alias de la entidad unida.

00:01:32.236 --> 00:01:38.456 align:middle
Cuando decimos category.fortuneCookies, nos
referimos a la propiedad fortuneCookies.

00:01:39.086 --> 00:01:40.906 align:middle
Lo bueno es que...

00:01:41.156 --> 00:01:42.626 align:middle
¡esto es todo lo que necesitamos!

00:01:43.186 --> 00:01:47.206 align:middle
No necesitamos decirle a Doctrine a qué
entidad o tabla nos estamos uniendo...

00:01:47.746 --> 00:01:54.116 align:middle
y no necesitamos el ON
fortune_cookie.category_id = category.id

00:01:54.116 --> 00:01:56.956 align:middle
que veríamos normalmente en SQL.

00:01:57.666 --> 00:02:03.856 align:middle
No necesitamos nada de esto porque Doctrine ya
tiene esa información en el mapeo OneToMany.

00:02:04.506 --> 00:02:08.936 align:middle
Sólo decimos "unir a través de esta
propiedad" y ¡él hace el resto!

00:02:09.876 --> 00:02:14.136 align:middle
Una cosa a tener en cuenta, de la
que hablaremos más adelante, es que,

00:02:14.446 --> 00:02:18.596 align:middle
al unirnos a algo, no estamos
seleccionando más datos.

00:02:19.026 --> 00:02:23.586 align:middle
Sólo estamos haciendo que las propiedades de FortuneCookie
estén disponibles dentro de nuestra consulta.

00:02:24.286 --> 00:02:27.596 align:middle
Esto significa que podemos hacer que
->andWhere() sea aún más largo.

00:02:28.616 --> 00:02:36.196 align:middle
Añade OR fortuneCookie (utilizando el nuevo alias
de la unión) .fortune (porque fortune es el nombre

00:02:36.196 --> 00:02:42.686 align:middle
de la propiedad de FortuneCookie que
almacena el texto) LIKE :searchTerm.

00:02:43.966 --> 00:02:46.246 align:middle
¡Listo! Vuelve al sitio.

00:02:47.206 --> 00:02:49.716 align:middle
Una de mis fortunas tiene
la palabra "conclusión".

00:02:50.446 --> 00:02:54.686 align:middle
Gira hasta la página principal,
busca "conclusión" y...

00:02:55.116 --> 00:03:00.256 align:middle
¡ya está! ¡Parece que tenemos al menos una
coincidencia en nuestra categoría "Proverbios"!

00:03:00.526 --> 00:03:02.156 align:middle
¡Falta la conclusión!

00:03:02.806 --> 00:03:06.026 align:middle
Pero si haces clic en el icono de la base de datos
de la barra de herramientas de depuración web...

00:03:06.436 --> 00:03:08.496 align:middle
esta página tiene dos consultas.

00:03:09.616 --> 00:03:13.146 align:middle
La primera es para la
categoría - tiene FROM category

00:03:13.666 --> 00:03:16.626 align:middle
e incluye el LEFT JOIN que acabamos de añadir.

00:03:17.416 --> 00:03:19.906 align:middle
La segunda es FROM fortune_cookie.

00:03:20.606 --> 00:03:26.326 align:middle
Y si vamos a la página principal sin
buscar, hay siete consultas en total:

00:03:26.996 --> 00:03:29.076 align:middle
una para buscar todas las categorías...

00:03:29.456 --> 00:03:36.136 align:middle
y luego otras 6 para encontrar las galletas de
la suerte de cada una de las seis categorías.

00:03:36.756 --> 00:03:39.476 align:middle
Esto se denomina problema de consulta N+1.

00:03:40.046 --> 00:03:43.606 align:middle
Hablemos de ello a continuación
y solucionémoslo con uniones.
